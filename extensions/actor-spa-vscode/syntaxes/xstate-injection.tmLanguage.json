{
  "name": "XState Machine Injection",
  "scopeName": "xstate.machine.injection",
  "injectionSelector": "L:source.ts -comment -string, L:source.js -comment -string, L:source.tsx -comment -string, L:source.jsx -comment -string",
  "patterns": [
    {
      "include": "#js-line-comment"
    },
    {
      "include": "#js-block-comment"
    },
    {
      "name": "meta.xstate.actor-reference",
      "match": "(?:\\b|\\.)(?:actorRef|actor|childActor|parentActor|systemActor)\\.(send|getSnapshot|subscribe|start|stop|id|sessionId|system|getPersistedSnapshot)\\b",
      "captures": {
        "1": {
          "name": "support.function.xstate.actor-method"
        }
      }
    },
    {
      "name": "meta.xstate.actor-property-access",
      "match": "\\b(actorRef|actor|childActor|parentActor|systemActor)\\b(?=\\.)",
      "captures": {
        "1": {
          "name": "variable.language.xstate.actor"
        }
      }
    },
    {
      "include": "#actor-model-terms"
    },
    {
      "include": "#xstate-imports"
    },
    {
      "name": "meta.xstate.machine",
      "begin": "\\b(createMachine|createActor|setup)\\s*\\(",
      "beginCaptures": {
        "1": {
          "name": "support.function.xstate.machine-creator"
        }
      },
      "end": "\\)",
      "patterns": [
        {
          "include": "#xstate-machine-config"
        }
      ]
    },
    {
      "name": "meta.xstate.state-matches",
      "match": "\\b(state|snapshot)\\.(matches|can|hasTag|status)\\b",
      "captures": {
        "1": {
          "name": "variable.language.xstate.state"
        },
        "2": {
          "name": "support.function.xstate.state-method"
        }
      }
    },
    {
      "name": "meta.xstate.state-properties",
      "match": "\\b(state|snapshot)\\.(value|context|children|event|historyValue|history|done|tags|toStrings|configuration|transitions)\\b",
      "captures": {
        "1": {
          "name": "variable.language.xstate.state"
        },
        "2": {
          "name": "support.variable.xstate.state-property"
        }
      }
    }
  ],
  "repository": {
    "actor-model-terms": {
      "patterns": [
        {
          "name": "keyword.control.actor-model",
          "match": "\\b(actor|actors|spawn|invoke|sendTo|sendParent|publish)\\b(?!\\.)"
        },
        {
          "name": "storage.type.actor-model",
          "match": "\\b(Actor|ActorRef|ActorLogic|ActorSystem|EventObject|StateValue|Snapshot)\\b"
        },
        {
          "name": "constant.language.actor-model.event",
          "match": "\\b(xstate\\.stop|xstate\\.init|xstate\\.done|xstate\\.error|xstate\\.cancel)\\b"
        },
        {
          "name": "entity.name.tag.actor-model",
          "match": "\\b(machine|statechart|behavior|effect|reducer)\\b"
        }
      ]
    },
    "xstate-imports": {
      "patterns": [
        {
          "name": "meta.import.xstate",
          "match": "(import)\\s*\\{([^}]+)\\}\\s*(from)\\s*['\"]xstate['\"]",
          "captures": {
            "1": {
              "name": "keyword.control.import.js"
            },
            "2": {
              "patterns": [
                {
                  "match": "\\b(createMachine|createActor|spawn|send|sendTo|assign|interpret|State|Machine|Actor)\\b",
                  "name": "support.class.xstate"
                }
              ]
            },
            "3": {
              "name": "keyword.control.from.js"
            }
          }
        }
      ]
    },
    "xstate-machine-config": {
      "patterns": [
        {
          "include": "#js-line-comment"
        },
        {
          "include": "#js-block-comment"
        },
        {
          "name": "meta.xstate.states-definition",
          "begin": "\\b(states)\\s*:\\s*\\{",
          "beginCaptures": {
            "1": {
              "name": "support.type.property-name.xstate.config"
            }
          },
          "end": "\\}",
          "patterns": [
            {
              "name": "meta.xstate.state-name",
              "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=:)",
              "captures": {
                "1": {
                  "name": "entity.name.type.state.xstate"
                }
              }
            },
            {
              "name": "meta.xstate.state-property-keywords",
              "match": "\\b(on|entry|exit|invoke|always|after|states|type)\\s*:",
              "captures": {
                "1": {
                  "name": "keyword.control.xstate.state-property"
                }
              }
            },
            {
              "include": "#xstate-state-definition"
            },
            {
              "include": "#js-line-comment"
            },
            {
              "include": "#js-block-comment"
            },
            {
              "include": "source.ts"
            }
          ]
        },
        {
          "name": "support.type.property-name.xstate.config",
          "match": "\\b(id|initial|context|states|on|entry|exit|always|after|invoke|guards|actions|services|delays|types|tsTypes|actors|systemId|input|output)\\b(?=\\s*:)"
        },
        {
          "name": "support.type.property-name.xstate.state-config",
          "match": "\\b(type|target|guard|description|meta|src|data|onDone|onError|autoForward)\\b(?=\\s*:)"
        },
        {
          "name": "constant.language.xstate.state-type",
          "match": "\\b(atomic|compound|parallel|history|final)\\b"
        },
        {
          "name": "support.function.xstate.action",
          "match": "\\b(assign|raise|send|sendTo|sendParent|log|cancel|stop|spawn|choose|pure|escalate|forwardTo|respond|enqueueActions)\\b"
        },
        {
          "name": "support.function.xstate.actor-action",
          "match": "\\b(spawnChild|stopChild|sendParent|sendTo)\\b"
        },
        {
          "name": "support.function.xstate.guard",
          "match": "\\b(and|or|not|stateIn)\\b(?=\\s*\\()"
        },
        {
          "name": "constant.language.xstate.event-type",
          "match": "\\b(type)\\s*:\\s*['\"]([A-Z_]+)['\"]",
          "captures": {
            "1": {
              "name": "support.type.property-name"
            },
            "2": {
              "name": "constant.language.xstate.event-name"
            }
          }
        },
        {
          "name": "meta.xstate.initial-state",
          "match": "\\b(initial)\\s*:\\s*['\"]([^'\"]+)['\"]",
          "captures": {
            "1": {
              "name": "keyword.control.xstate.initial"
            },
            "2": {
              "name": "string.quoted.xstate.initial-state-name"
            }
          }
        },
        {
          "name": "meta.xstate.final-state-type",
          "match": "\\b(type)\\s*:\\s*['\"]final['\"]",
          "captures": {
            "0": {
              "name": "keyword.control.xstate.final-state"
            }
          }
        },
        {
          "include": "source.ts"
        }
      ]
    },
    "xstate-state-definition": {
      "patterns": [
        {
          "name": "support.type.property-name.xstate.state-config",
          "match": "\\b(type|target|guard|description|meta|src|data|onDone|onError|autoForward|on|entry|exit|always|after|invoke|states)\\b(?=\\s*:)"
        },
        {
          "name": "meta.xstate.nested-states",
          "begin": "\\b(states)\\s*:\\s*\\{",
          "beginCaptures": {
            "1": {
              "name": "support.type.property-name.xstate.state-config"
            }
          },
          "end": "\\}",
          "patterns": [
            {
              "name": "meta.xstate.state-name",
              "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=:)",
              "captures": {
                "1": {
                  "name": "entity.name.type.state.xstate"
                }
              }
            },
            {
              "include": "#xstate-state-definition"
            },
            {
              "include": "source.ts"
            }
          ]
        },
        {
          "include": "#xstate-machine-config"
        }
      ]
    },
    "js-line-comment": {
      "name": "comment.line.double-slash.ts",
      "begin": "//",
      "end": "$",
      "patterns": [
        {
          "name": "storage.type.class.jsdoc",
          "match": "\\b(TODO|FIXME|NOTE|HACK|XXX|BUG)\\b"
        },
        {
          "name": "keyword.other.documentation.js",
          "match": "@\\w+"
        }
      ]
    },
    "js-block-comment": {
      "name": "comment.block.js",
      "begin": "/\\*",
      "end": "\\*/",
      "patterns": [
        {
          "name": "storage.type.class.jsdoc",
          "match": "\\b(TODO|FIXME|NOTE|HACK|XXX|BUG)\\b"
        },
        {
          "name": "keyword.other.documentation.js",
          "match": "@\\w+"
        }
      ]
    }
  }
}
