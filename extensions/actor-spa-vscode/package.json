{
  "name": "actor-spa-framework",
  "displayName": "Actor-SPA Framework Support",
  "description": "Enhanced syntax highlighting and formatting for the Actor-SPA framework with XState and actor model emphasis",
  "version": "0.2.5",
  "publisher": "actor-spa",
  "repository": {
    "type": "git",
    "url": "https://github.com/yourusername/port8080folio"
  },
  "license": "MIT",
  "galleryBanner": {
    "color": "#1e1e1e",
    "theme": "dark"
  },
  "badges": [
    {
      "url": "https://img.shields.io/badge/Actor--SPA-Framework-blue",
      "href": "https://github.com/yourusername/port8080folio",
      "description": "Actor-SPA Framework"
    }
  ],
  "engines": {
    "vscode": "^1.60.0"
  },
  "categories": [
    "Programming Languages",
    "Formatters",
    "Snippets",
    "Other"
  ],
  "keywords": [
    "actor-spa",
    "xstate",
    "html",
    "template-literals",
    "syntax-highlighting"
  ],
  "activationEvents": [
    "onLanguage:typescript",
    "onLanguage:javascript"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "languages": [
      {
        "id": "actor-spa-html",
        "aliases": [
          "Actor-SPA HTML",
          "actor-html"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "actor-spa-html",
        "scopeName": "text.html.actor-spa",
        "path": "./syntaxes/actor-spa-html-injection.tmLanguage.json"
      },
      {
        "scopeName": "actor-spa.template-literals",
        "path": "./syntaxes/actor-spa-template-literals.tmLanguage.json",
        "injectTo": [
          "source.ts",
          "source.js",
          "source.tsx",
          "source.jsx"
        ],
        "embeddedLanguages": {
          "meta.embedded.block.html": "html",
          "meta.embedded.block.css": "css"
        }
      },
      {
        "scopeName": "xstate.machine.injection",
        "path": "./syntaxes/xstate-injection.tmLanguage.json",
        "injectTo": [
          "source.ts",
          "source.js",
          "source.tsx",
          "source.jsx"
        ]
      },
      {
        "scopeName": "reactive-lint.todo.injection",
        "path": "./syntaxes/reactive-lint-todo-injection.tmLanguage.json",
        "injectTo": [
          "source.ts",
          "source.js",
          "source.tsx",
          "source.jsx"
        ]
      }
    ],
    "themes": [
      {
        "label": "Actor-SPA Tokyo Night",
        "uiTheme": "vs-dark",
        "path": "./themes/actor-spa-theme.json"
      },
      {
        "label": "Actor-SPA GitHub Dark",
        "uiTheme": "vs-dark",
        "path": "./themes/actor-spa-github-dark.json"
      },
      {
        "label": "Actor-SPA Monokai",
        "uiTheme": "vs-dark",
        "path": "./themes/actor-spa-monokai.json"
      },
      {
        "label": "Actor-SPA Night Owl",
        "uiTheme": "vs-dark",
        "path": "./themes/actor-spa-night-owl.json"
      },
      {
        "label": "Actor-SPA Minimal Light",
        "uiTheme": "vs",
        "path": "./themes/actor-spa-minimal-light.json"
      },
      {
        "label": "Actor-SPA Port8080",
        "uiTheme": "vs-dark",
        "path": "./themes/actor-spa-port8080.json"
      }
    ],
    "commands": [
      {
        "command": "actor-spa.generateComponent",
        "title": "Generate Actor-SPA Component"
      },
      {
        "command": "actor-spa.generateMachine",
        "title": "Generate XState Machine"
      },
      {
        "command": "actor-spa.ai.sendMessage",
        "title": "AI: Send Message to Another Agent",
        "category": "AI Communication"
      },
      {
        "command": "actor-spa.ai.getMessageHistory",
        "title": "AI: View Message History",
        "category": "AI Communication"
      },
      {
        "command": "actor-spa.ai.subscribeToChannel",
        "title": "AI: Subscribe to Communication Channel",
        "category": "AI Communication"
      },
      {
        "command": "actor-spa.ai.getStats",
        "title": "AI: View Communication Statistics",
        "category": "AI Communication"
      },
      {
        "command": "actor-spa.ai.startWebSocketServer",
        "title": "AI: Start WebSocket Server",
        "category": "AI Communication"
      },
      {
        "command": "actor-spa.ai.stopWebSocketServer",
        "title": "AI: Stop WebSocket Server",
        "category": "AI Communication"
      },
      {
        "command": "actor-spa.showReactivePatternDocs",
        "title": "Show Reactive Pattern Documentation",
        "category": "Reactive-Lint"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "command": "actor-spa.generateComponent",
          "group": "actor-spa"
        },
        {
          "command": "actor-spa.generateMachine",
          "group": "actor-spa"
        }
      ]
    },
    "configuration": {
      "title": "Actor-SPA Framework",
      "properties": {
        "actor-spa.enableDiagnostics": {
          "type": "boolean",
          "default": true,
          "description": "Enable Actor-SPA framework diagnostics"
        },
        "actor-spa.maxCompletions": {
          "type": "number",
          "default": 50,
          "description": "Maximum number of completion suggestions"
        },
        "actor-spa.formatting.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable formatting for template literals. Note: Complex nested templates have known limitations - see KNOWN_ISSUES.md"
        },
        "actor-spa.formatting.formatter": {
          "type": "string",
          "default": "simple",
          "enum": [
            "simple",
            "actor",
            "legacy"
          ],
          "enumDescriptions": [
            "Simple formatter - Fast and reliable for basic HTML/CSS templates (recommended)",
            "Actor-based formatter - Uses state machines and external tools (experimental)",
            "Legacy formatter - Original implementation with multiple fallbacks"
          ],
          "description": "Choose which formatter to use for template literals"
        },
        "actor-spa.formatting.htmlIndentSize": {
          "type": "number",
          "default": 2,
          "description": "Number of spaces for HTML indentation in template literals"
        },
        "actor-spa.formatting.cssIndentSize": {
          "type": "number",
          "default": 2,
          "description": "Number of spaces for CSS indentation in template literals"
        },
        "actor-spa.formatting.preserveNewlines": {
          "type": "boolean",
          "default": true,
          "description": "Preserve existing newlines in template literals"
        },
        "actor-spa.useXStateFormatter": {
          "type": "boolean",
          "default": true,
          "description": "Use the new XState-based formatter (experimental)"
        },
        "actor-spa.useActorFormatter": {
          "type": "boolean",
          "default": false,
          "description": "Use the experimental actor-based formatter (deprecated - use formatting.formatter instead)"
        },
        "actor-spa.formatting.maxParallelJobs": {
          "type": "number",
          "default": 4,
          "description": "Maximum number of parallel formatting jobs"
        },
        "actor-spa.formatting.timeout": {
          "type": "number",
          "default": 10000,
          "description": "Timeout for formatting operations (milliseconds)"
        },
        "actor-spa.formatting.preferredFormatter": {
          "type": "string",
          "enum": [
            "biome",
            "prettier",
            "fallback"
          ],
          "default": "biome",
          "description": "Preferred formatter to use (biome, prettier, or fallback)"
        },
        "actor-spa.formatting.enableParallelProcessing": {
          "type": "boolean",
          "default": true,
          "description": "Enable parallel processing of multiple templates"
        },
        "actor-spa.debug.logLevel": {
          "type": "string",
          "enum": [
            "error",
            "warn",
            "info",
            "debug",
            "trace"
          ],
          "default": "info",
          "description": "Debug log level (error, warn, info, debug, trace)"
        },
        "actor-spa.debug.enabledComponents": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "*"
          ],
          "description": "List of components to enable debug logging for, or ['*'] for all"
        },
        "actor-spa.telemetry.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable privacy-first usage analytics (opt-in only)"
        },
        "actor-spa.telemetry.flushIntervalMs": {
          "type": "number",
          "default": 60000,
          "description": "How often to flush telemetry buffer (milliseconds)"
        },
        "actor-spa.telemetry.maxBufferSize": {
          "type": "number",
          "default": 100,
          "description": "Maximum number of telemetry events to buffer"
        },
        "actor-spa.telemetry.endpoint": {
          "type": "string",
          "description": "Custom telemetry endpoint (optional)"
        },
        "actor-spa.aiCommunication.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable AI-to-AI communication features"
        },
        "actor-spa.aiCommunication.config.communicationMethod": {
          "type": "string",
          "enum": [
            "file",
            "websocket",
            "ipc",
            "vscode-api"
          ],
          "default": "file",
          "description": "Communication method for AI agents"
        },
        "actor-spa.aiCommunication.config.websocketPort": {
          "type": "number",
          "default": 8765,
          "description": "WebSocket server port for AI communication"
        },
        "actor-spa.aiCommunication.config.websocketHost": {
          "type": "string",
          "default": "localhost",
          "description": "WebSocket server host"
        },
        "actor-spa.aiCommunication.config.maxQueueSize": {
          "type": "number",
          "default": 1000,
          "description": "Maximum message queue size"
        },
        "actor-spa.aiCommunication.config.maxHistorySize": {
          "type": "number",
          "default": 10000,
          "description": "Maximum message history size"
        },
        "actor-spa.aiCommunication.config.messageTimeout": {
          "type": "number",
          "default": 30000,
          "description": "Message timeout in milliseconds"
        },
        "actor-spa.aiCommunication.config.retryAttempts": {
          "type": "number",
          "default": 3,
          "description": "Number of retry attempts for failed messages"
        },
        "actor-spa.aiCommunication.config.retryDelay": {
          "type": "number",
          "default": 1000,
          "description": "Delay between retry attempts in milliseconds"
        },
        "actor-spa.aiCommunication.config.enableEncryption": {
          "type": "boolean",
          "default": false,
          "description": "Enable message encryption (not yet implemented)"
        },
        "actor-spa.aiCommunication.config.enableCompression": {
          "type": "boolean",
          "default": false,
          "description": "Enable message compression (not yet implemented)"
        },
        "actor-spa.aiCommunication.config.fileStoragePath": {
          "type": "string",
          "default": ".ai-messages",
          "description": "Path for file-based message storage"
        },
        "actor-spa.reactiveLint.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable reactive-lint diagnostics and quick fixes"
        },
        "actor-spa.reactiveLint.debounceMs": {
          "type": "number",
          "default": 1000,
          "description": "Debounce delay for reactive-lint analysis (milliseconds)"
        }
      }
    },
    "snippets": [
      {
        "language": "typescript",
        "path": "./snippets/framework.code-snippets"
      },
      {
        "language": "javascript",
        "path": "./snippets/framework.code-snippets"
      },
      {
        "language": "typescriptreact",
        "path": "./snippets/framework.code-snippets"
      },
      {
        "language": "javascriptreact",
        "path": "./snippets/framework.code-snippets"
      }
    ],
    "typescriptServerPlugins": [
      {
        "name": "actor-spa-typescript-plugin",
        "enableForWorkspaceTypeScriptVersions": true
      }
    ]
  },
  "typescriptServerPlugin": true,
  "scripts": {
    "vscode:prepublish": "pnpm run compile",
    "compile": "webpack --mode production",
    "watch": "webpack --mode development --watch",
    "pretest": "pnpm run compile && pnpm run check",
    "check": "biome check src && npx tsc --noEmit",
    "lint": "biome lint src",
    "format": "biome format --write src",
    "test": "node ./out/test/runTest.js",
    "package": "vsce package",
    "package:clean": "rm -rf node_modules pnpm-lock.yaml && npm install && npm run package",
    "publish": "vsce publish",
    "install-local": "code --install-extension actor-spa-framework-*.vsix",
    "dev": "node scripts/dev.js",
    "clean": "rimraf out *.vsix",
    "analyze:templates": "ts-node src/linter-rules/analyze-templates.ts",
    "lint:templates": "ts-node src/linter-rules/analyze-templates.ts '**/*.ts' '**/*.tsx' --max-depth 2",
    "lint:templates:strict": "ts-node src/linter-rules/analyze-templates.ts '**/*.ts' '**/*.tsx' --max-depth 1 --min-lines 2"
  },
  "devDependencies": {
    "@types/glob": "^8.0.0",
    "@types/mocha": "^9.1.1",
    "@types/node": "16.x",
    "@types/vscode": "^1.60.0",
    "@types/ws": "^8.5.5",
    "@vscode/test-electron": "^2.1.5",
    "@vscode/vsce": "^2.15.0",
    "chalk": "^4.1.2",
    "commander": "^9.4.1",
    "glob": "^8.0.3",
    "mocha": "^10.1.0",
    "rimraf": "^3.0.2",
    "ts-loader": "^9.4.2",
    "ts-node": "^10.9.1",
    "typescript": "^5.8.3",
    "webpack": "^5.90.0",
    "webpack-cli": "^5.1.4"
  },
  "dependencies": {
    "@biomejs/biome": "^2.1.1",
    "prettier": "^3.6.2",
    "ws": "^8.18.3",
    "xstate": "^5.20.0"
  }
}
