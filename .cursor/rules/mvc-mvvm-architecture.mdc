---
description: 
globs: 
alwaysApply: false
---
# MVC/MVVM Architecture Guidelines

## Overview

This project follows a hybrid MVC/MVVM architecture with Web Components as Views, XState machines as Controllers/ViewModels, and clear separation of concerns.

## Architecture Principles

### 1. Separation of Concerns
- **View Layer**: Web Components handle ONLY presentation and user interactions
- **Controller/ViewModel Layer**: State machines handle ONLY business logic and state management  
- **Model Layer**: Data structures and API interfaces
- **Integration Layer**: Minimal glue code to connect View ↔ Controller

### 2. Component Structure

#### Web Components (View Layer)
```javascript
// ✅ Good: Pure presentation component
class MyComponent extends HTMLElement {
  constructor() {
    super();
    // Only view-related state
    this.isVisible = false;
  }

  connectedCallback() {
    this.render();
    this.setupEventListeners();
  }

  render() {
    // Only HTML/CSS/DOM manipulation
    this.innerHTML = `<div>...</div>`;
  }

  setupEventListeners() {
    // Only UI event handling, emit custom events for business logic
    this.addEventListener('click', (e) => {
      this.dispatchEvent(new CustomEvent('user-action', {
        detail: { type: 'click', target: e.target }
      }));
    });
  }

  // Public API methods that controller can call
  show() { this.style.display = 'block'; }
  hide() { this.style.display = 'none'; }
}

// ❌ Bad: Mixed concerns
class BadComponent extends HTMLElement {
  connectedCallback() {
    this.render();
    this.initializeDatabase(); // ❌ Data logic in view
    this.setupAnalytics();     // ❌ Business logic in view
  }
}
```

#### State Machines (Controller/ViewModel Layer)
```javascript
// ✅ Good: Pure business logic
export const myStateMachine = createMachine({
  id: 'myFeature',
  initial: 'idle',
  context: {
    data: null,
    error: null,
    lastAction: null
  },
  states: {
    idle: {
      on: {
        LOAD: 'loading'
      }
    },
    loading: {
      invoke: {
        src: 'loadData',
        onDone: {
          target: 'loaded',
          actions: assign({ data: ({ event }) => event.output })
        },
        onError: {
          target: 'error',
          actions: assign({ error: ({ event }) => event.error })
        }
      }
    }
  }
}, {
  actors: {
    loadData: fromPromise(async () => {
      // Pure data fetching logic
      return await api.getData();
    })
  }
});

// ❌ Bad: DOM manipulation in state machine
export const badStateMachine = createMachine({
  // ...
}, {
  actions: {
    showModal: () => {
      // ❌ DOM manipulation in business logic
      document.getElementById('modal').style.display = 'block';
    }
  }
});
```

#### Controller Classes (Integration Layer)
```javascript
// ✅ Good: Minimal glue code
export class MyController {
  constructor(component) {
    this.component = component;
    this.actor = createActor(myStateMachine);
    this.bindEvents();
    this.actor.start();
  }

  bindEvents() {
    // Listen to view events
    this.component.addEventListener('user-action', (e) => {
      this.actor.send({ type: 'USER_ACTION', ...e.detail });
    });

    // Listen to state changes
    this.actor.subscribe((state) => {
      this.updateView(state);
    });
  }

  updateView(state) {
    // Sync state to view
    if (state.matches('loading')) {
      this.component.showLoading();
    } else if (state.matches('loaded')) {
      this.component.showData(state.context.data);
    }
  }
}
```

### 3. File Naming Conventions

```
src/components/ui/
├── feature-name-component.js        # View Layer (Web Component)
├── feature-name-state-machine.js    # Controller Layer (State Machine + Controller)
├── feature-name-model.js            # Model Layer (Data structures, API)
└── feature-name-types.ts            # TypeScript types/interfaces
```

### 4. Communication Patterns

#### View → Controller
```javascript
// Use custom events with semantic names
this.dispatchEvent(new CustomEvent('nav-close-requested', {
  bubbles: true,
  detail: { source: 'keyboard', reason: 'escape-key' }
}));
```

#### Controller → View
```javascript
// Use public methods on component
this.component.open();
this.component.setData(data);
this.component.showError(error);
```

#### Controller → Controller
```javascript
// Use document events for cross-component communication
document.dispatchEvent(new CustomEvent('feature-state-changed', {
  detail: { state: 'active', feature: 'navigation' }
}));
```

### 5. State Management Rules

#### Context Structure
```javascript
// ✅ Good: Flat, serializable context
context: {
  isLoading: false,
  data: null,
  error: null,
  lastUpdated: null,
  userPreferences: {
    theme: 'dark',
    language: 'en'
  }
}

// ❌ Bad: Complex objects, functions, DOM references
context: {
  domElement: document.getElementById('thing'), // ❌ DOM reference
  callback: () => {},                          // ❌ Function
  complexObject: new SomeClass()               // ❌ Non-serializable
}
```

#### Event Naming
```javascript
// ✅ Good: Descriptive, action-oriented
{ type: 'LOAD_DATA' }
{ type: 'USER_CLICKED_SUBMIT' }
{ type: 'API_REQUEST_FAILED' }

// ❌ Bad: Vague or implementation-specific
{ type: 'CLICK' }
{ type: 'UPDATE' }
{ type: 'AJAX_DONE' }
```

### 6. Error Handling Strategy

#### Graceful Degradation
```javascript
export class FeatureController {
  constructor(component) {
    this.component = component;
    this.useSimpleState = false;
    
    try {
      this.initializeStateMachine();
    } catch (error) {
      console.warn('State machine failed, using simple fallback:', error);
      this.useSimpleState = true;
    }
  }

  handleAction(action) {
    if (this.useSimpleState) {
      // Simple JavaScript fallback
      this.component.toggle();
    } else {
      // Full state machine
      this.actor.send({ type: 'TOGGLE' });
    }
  }
}
```

### 7. Testing Strategy

#### Component Testing (View Layer)
```javascript
// Test component in isolation
describe('MyComponent', () => {
  let component;

  beforeEach(() => {
    component = new MyComponent();
    document.body.appendChild(component);
  });

  it('should emit custom event on user interaction', () => {
    const eventSpy = jest.fn();
    component.addEventListener('user-action', eventSpy);
    
    component.querySelector('button').click();
    
    expect(eventSpy).toHaveBeenCalledWith(
      expect.objectContaining({
        detail: { type: 'click' }
      })
    );
  });
});
```

#### State Machine Testing (Controller Layer)
```javascript
// Test state machine logic without DOM
describe('myStateMachine', () => {
  it('should transition from idle to loading', () => {
    const actor = createActor(myStateMachine);
    actor.start();
    
    actor.send({ type: 'LOAD' });
    
    expect(actor.getSnapshot().matches('loading')).toBe(true);
  });
});
```

### 8. TypeScript Integration

#### Component Interfaces
```typescript
interface MyComponentProps {
  data: UserData[];
  theme: 'light' | 'dark';
  onAction: (action: UserAction) => void;
}

interface UserAction {
  type: 'select' | 'delete' | 'edit';
  id: string;
  metadata?: Record<string, unknown>;
}
```

#### State Machine Types
```typescript
interface MyContext {
  users: UserData[];
  selectedUser: UserData | null;
  isLoading: boolean;
  error: string | null;
}

type MyEvent = 
  | { type: 'LOAD_USERS' }
  | { type: 'SELECT_USER'; userId: string }
  | { type: 'DELETE_USER'; userId: string };
```

### 9. Performance Guidelines

#### Lazy Loading
```javascript
// Load components on demand
async initializeFeature() {
  const [componentModule, stateModule] = await Promise.all([
    import('./feature-component.js'),
    import('./feature-state-machine.js')
  ]);
  
  // Initialize only when needed
}
```

#### Memory Management
```javascript
class FeatureController {
  destroy() {
    this.actor?.stop();
    this.component?.remove();
    this.eventListeners.forEach(cleanup => cleanup());
  }
}
```

### 10. Accessibility Requirements

#### Component Accessibility
```javascript
class AccessibleComponent extends HTMLElement {
  connectedCallback() {
    this.render();
    this.setupAccessibility();
  }

  setupAccessibility() {
    // Required accessibility features
    this.setAttribute('role', 'button');
    this.setAttribute('aria-label', 'Close navigation');
    this.setAttribute('tabindex', '0');
    
    // Keyboard navigation
    this.addEventListener('keydown', this.handleKeyDown.bind(this));
  }

  handleKeyDown(e) {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      this.click();
    }
  }
}
```

## Anti-Patterns to Avoid

### ❌ Mixed Concerns
```javascript
// Don't put business logic in components
class BadComponent extends HTMLElement {
  async saveData() {
    const response = await fetch('/api/save'); // ❌ API call in view
    this.analytics.track('save');              // ❌ Analytics in view
  }
}
```

### ❌ Direct DOM Manipulation in State Machines
```javascript
// Don't manipulate DOM in state machines
const badMachine = createMachine({
  actions: {
    showModal: () => {
      document.body.appendChild(modal); // ❌ DOM manipulation in logic
    }
  }
});
```

### ❌ Tight Coupling
```javascript
// Don't directly access internal component state from controllers
class BadController {
  updateView() {
    this.component._internalState = 'updated'; // ❌ Accessing private state
  }
}
```

### ❌ Global State Pollution
```javascript
// Don't pollute global scope
window.myComponentState = {}; // ❌ Global state
```

## Migration Checklist

When refactoring existing code:

- [ ] Extract DOM manipulation from business logic
- [ ] Create pure web components for presentation
- [ ] Move business logic to state machines
- [ ] Add controller layer for integration
- [ ] Implement proper event communication
- [ ] Add TypeScript types
- [ ] Write tests for each layer
- [ ] Add error handling and fallbacks
- [ ] Ensure accessibility compliance
- [ ] Document component APIs

This architecture ensures maintainable, testable, and scalable code that follows industry best practices.
